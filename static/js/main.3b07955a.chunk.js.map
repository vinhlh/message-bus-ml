{"version":3,"sources":["parser/index.js","components/Cytoscape.js","components/InputBox.js","App.js","serviceWorker.js","index.js"],"names":["parse","lines","queues","topics","edges","split","forEach","line","trim","rawQueue","rawTopics","queue","push","data","id","class","parent","topic","source","target","cytoscape","use","dagre","configs","elements","style","selector","label","shape","opacity","width","padding","css","layoutConfigs","name","fit","rankDir","Container","styled","div","ExportButton","button","Cytoscape","cy","export","image","png","full","output","a","document","createElement","href","URL","createObjectURL","Blob","type","download","click","container","this","ref","mapPropsToNewValues","props","nextProps","json","input","makeLayout","run","nodes","on","e","ele","removeClass","addClass","neighborhood","destroy","onClick","Component","TextBox","textarea","InputBox","value","onChange","event","GlobalStyle","createGlobalStyle","App","useState","setInput","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.3b07955a.chunk.js","sourcesContent":["const LINE_SEPARATOR = '\\n'\nconst TOPIC_QUEUE_SEPARATOR = '>'\nconst TOPIC_SEPARATOR = ','\n\nconst parse = (lines) => {\n  const queues = []\n  const topics = []\n  const edges = []\n  lines.split(LINE_SEPARATOR).forEach((line) => {\n    if (line.trim() === '') {\n      return\n    }\n\n    const [rawQueue, rawTopics] = line.split(TOPIC_QUEUE_SEPARATOR)\n    if (!rawTopics || rawTopics.trim() === '') {\n      return\n    }\n\n    const queue = rawQueue.trim()\n    queues.push({\n      data: {\n        id: queue,\n        class: 'queue',\n        parent: 'SES',\n      },\n    })\n\n    rawTopics\n      .split(TOPIC_SEPARATOR)\n      .forEach((topic) => {\n        topic = topic.trim()\n        if (topic === '') {\n          return\n        }\n\n        topics.push({\n          data: {\n            id: topic,\n            class: 'topic',\n            parent: 'SNS',\n          },\n        })\n\n        edges.push({\n          data: {\n            id: `${queue} to ${topic}`,\n            source: topic,\n            target: queue,\n          },\n        })\n      })\n  })\n\n  return [\n    { data: { class: 'sns', id: 'SNS' } },\n    { data: { class: 'ses', id: 'SES' } },\n    ...queues,\n    ...topics,\n    ...edges,\n  ]\n}\n\nexport { parse }\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\nimport cytoscape from 'cytoscape'\nimport dagre from 'cytoscape-dagre'\n\nimport { parse } from '../parser'\n\ncytoscape.use(dagre)\n\nconst configs = {\n  elements: [],\n  style: [\n    {\n      selector: 'node',\n      style: {\n        'border-width': 2,\n        'border-color': '#0faffd',\n        'background-color': '#fff',\n        label: 'data(id)',\n        shape: 'round-rectangle',\n        'text-valign': 'center',\n        'text-halign': 'center',\n        'text-opacity': 1,\n        opacity: 1,\n        'text-outline-color': 'white',\n        'text-outline-opacity': 1,\n        'text-outline-width': 0.75,\n        width: 'label',\n        padding: 15,\n      },\n    },\n\n    {\n      selector: 'node.highlighted',\n      style: {\n        'border-width': 6,\n      },\n    },\n\n    {\n      selector: 'node[class=\"queue\"]',\n      style: {\n        'border-color': '#15d568',\n      },\n    },\n\n    {\n      selector: 'edge',\n      style: {\n        width: 2,\n        'line-color': '#848484',\n        'target-arrow-color': '#848484',\n        'target-arrow-shape': 'triangle',\n        'curve-style': 'bezier',\n      },\n    },\n\n    {\n      selector: 'edge.highlighted',\n      style: {\n        width: 6,\n      },\n    },\n\n    {\n      selector: ':parent',\n      css: {\n        padding: 20,\n        'border-width': 2,\n        'border-color': '#0faffd',\n        label: 'data(id)',\n        shape: 'round-rectangle',\n        'text-valign': 'top',\n        'text-halign': 'center',\n      },\n    },\n\n    {\n      selector: 'node[class=\"sns\"]',\n      css: {\n        'border-color': '#0faffd',\n        'background-color': '#d1f1fe',\n      },\n    },\n    {\n      selector: 'node[class=\"ses\"]',\n      css: {\n        'border-color': '#15d568',\n        'background-color': '#c1f3d7',\n      },\n    },\n  ],\n}\n\nconst layoutConfigs = {\n  name: 'dagre',\n  fit: true,\n  rankDir: 'LR',\n  padding: 20,\n}\n\nconst Container = styled.div`\n  flex: 3;\n`\n\nconst ExportButton = styled.button`\n  position: absolute;\n  bottom: 16px;\n  right: 16px;\n  color: #fff;\n  background-color: #000;\n  border: none;\n  padding: 8px 16px;\n  cursor: pointer;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nclass Cytoscape extends Component {\n  cy = null\n\n  componentDidMount() {\n    configs.container = this.ref\n    this.cy = cytoscape(configs)\n\n    this.mapPropsToNewValues(this.props)\n  }\n\n  shouldComponentUpdate() {\n    return false\n  }\n\n  componentWillReceiveProps(nextProps) {\n    this.mapPropsToNewValues(nextProps)\n  }\n\n  mapPropsToNewValues(props) {\n    this.cy.json({ elements: parse(props.input) })\n    this.cy.makeLayout(layoutConfigs).run()\n\n    this.cy.nodes().on('click', (e) => {\n      var ele = e.target\n\n      this.cy.edges().removeClass('highlighted')\n      this.cy.nodes().removeClass('highlighted')\n\n      this.cy.nodes(\"[id='\" + e.target.id() + \"']\").addClass('highlighted')\n      ele.neighborhood().addClass('highlighted')\n    })\n  }\n\n  componentWillUnmount() {\n    this.cy.destroy()\n  }\n\n  export = () => {\n    const image = this.cy.png({\n      full: true,\n      output: 'blob',\n    })\n\n    const a = document.createElement('a')\n    a.href = URL.createObjectURL(new Blob([image], { type: 'jpeg/png' }))\n    a.download = 'exported.png'\n    a.click()\n  }\n\n  render() {\n    return (\n      <>\n        <Container ref={(ref) => (this.ref = ref)} />\n        <ExportButton onClick={this.export}>Export</ExportButton>\n      </>\n    )\n  }\n}\n\nCytoscape.propTypes = {\n  input: PropTypes.string,\n}\n\nexport default Cytoscape\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  flex: 1;\n  background: rgba(0, 0, 0, 0.87);\n  display: flex;\n`\n\nconst TextBox = styled.textarea`\n  background: transparent;\n  width: 100%;\n  height: 100%;\n  margin: 0;\n  border: none;\n  color: #fff;\n  padding: 16px;\n  resize: none;\n\n  &:focus {\n    outline: none;\n  }\n`\n\nfunction InputBox({ value, onChange }) {\n  return (\n    <Container>\n      <TextBox\n        value={value}\n        onChange={(event) => onChange(event.target.value)}\n      ></TextBox>\n    </Container>\n  )\n}\n\nInputBox.propTypes = {\n  value: PropTypes.string,\n  onChange: PropTypes.func,\n}\n\nexport default InputBox\n","import React, { useState } from 'react'\nimport styled, { createGlobalStyle } from 'styled-components'\n\nimport Cytoscape from './components/Cytoscape'\nimport InputBox from './components/InputBox'\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    margin: 0;\n    font-family: -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',\n      'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',\n      sans-serif;\n    -webkit-font-smoothing: antialiased;\n    -moz-osx-font-smoothing: grayscale;\n  }\n\n  code {\n    font-family: source-code-pro, Menlo, Monaco, Consolas, 'Courier New',\n      monospace;\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`\n\nconst Container = styled.div`\n  position: absolute;\n  top: 0;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  display: flex;\n`\n\nconst exampleInput = `\nbilling-engine > order-placed\norder-tracking-service > order-placed, order-updates\ncustomer-worker > customer-registered\n`\n\nfunction App() {\n  const [input, setInput] = useState(exampleInput)\n\n  return (\n    <>\n      <GlobalStyle />\n      <Container>\n        <InputBox value={input} onChange={setInput} />\n        <Cytoscape input={input} />\n      </Container>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}